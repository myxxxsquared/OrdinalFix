LT	int	int
ST	IDENTIFIER	k
LT	,	,
ST	IDENTIFIER	n
LT	;	;
ST	IDENTIFIER	scanf
LT	(	(
ST	LITERAL_STRING	"%d%d"
LT	,	,
LT	&	&
ST	IDENTIFIER	k
LT	.	.
LT	&	&
ST	IDENTIFIER	n
LT	)	)
LT	;	;
LT	int	int
ST	IDENTIFIER	a
LT	[	[
ST	LITERAL_INT	0
LT	]	]
LT	;	;
LT	int	int
ST	IDENTIFIER	i
LT	=	=
ST	LITERAL_INT	0
LT	;	;
LT	for	for
LT	(	(
ST	IDENTIFIER	i
LT	=	=
ST	LITERAL_INT	0
LT	;	;
ST	IDENTIFIER	i
LT	<	<
ST	IDENTIFIER	n
LT	;	;
ST	IDENTIFIER	i
LT	++	++
LT	)	)
ST	IDENTIFIER	scanf
LT	(	(
ST	LITERAL_STRING	"%d"
LT	,	,
LT	&	&
ST	IDENTIFIER	a
LT	[	[
ST	IDENTIFIER	i
LT	]	]
LT	)	)
LT	;	;
LT	int	int
ST	IDENTIFIER	flag
LT	=	=
ST	LITERAL_INT	0
LT	;	;
LT	int	int
ST	IDENTIFIER	m
LT	=	=
ST	LITERAL_INT	0
LT	;	;
LT	while	while
LT	(	(
ST	IDENTIFIER	m
LT	<	<
ST	IDENTIFIER	n
LT	)	)
LT	{	{
LT	int	int
ST	IDENTIFIER	j
LT	=	=
ST	LITERAL_INT	0
LT	;	;
LT	while	while
LT	(	(
ST	IDENTIFIER	j
LT	<	<
ST	IDENTIFIER	n
LT	)	)
LT	{	{
LT	{	{
LT	if	if
LT	(	(
ST	IDENTIFIER	a
LT	[	[
ST	IDENTIFIER	j
LT	]	]
LT	==	==
LT	(	(
ST	IDENTIFIER	k
LT	-	-
LT	[	[
ST	IDENTIFIER	ai
LT	]	]
LT	)	)
LT	)	)
ST	IDENTIFIER	flag
LT	=	=
ST	LITERAL_INT	1
LT	;	;
LT	}	}
ST	IDENTIFIER	j
LT	++	++
LT	;	;
LT	}	}
ST	IDENTIFIER	m
LT	++	++
LT	;	;
LT	}	}
LT	if	if
LT	(	(
ST	IDENTIFIER	flag
LT	==	==
ST	LITERAL_INT	1
LT	)	)
ST	IDENTIFIER	printf
LT	(	(
ST	LITERAL_STRING	"lucky"
LT	)	)
LT	;	;
LT	else	else
ST	IDENTIFIER	printf
LT	(	(
ST	LITERAL_STRING	"unlucky"
LT	)	)
LT	;	;
LT	return	return
ST	LITERAL_INT	0
LT	;	;